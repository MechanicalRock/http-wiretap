service:
  name: wiretap-spike

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs8.10

custom:
  proxy:
    url: ${opt:proxyUrl}
    timeout: ${opt:proxyTimeout}
  vpc:
    id: "vpc-0b9c087f45dcb5a84"
    subnets: "subnet-04b8dfbd46f30e13e,subnet-01cebe6e58176737e,subnet-0b468a68422d356f3"

functions:
  sendProxy:
    handler: build/handler.sendProxy
    vpc:
      securityGroupIds:
        - Ref: SendProxySecurityGroup
      subnetIds: !Split [",", "${self:custom.vpc.subnets}"]
    environment:
      PROXY_URL: ${self:custom.proxy.url}
      PROXY_TIMEOUT_SECONDS: ${self:custom.proxy.timeout}

resources:
  Resources:
    sendProxySecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: SendProxySecurityGroup
        GroupDescription: "Lambda Security Group for sendProxy function"
        VpcId: ${self:custom.vpc.id}
        SecurityGroupIngress:
          - SourceSecurityGroupId: !Ref ALBSecurityGroupSendProxy
            IpProtocol: tcp
            FromPort: 5050
            ToPort: 5050

    albSecurityGroupSendProxy:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: ${self:custom.vpc.id}
        GroupName: "SendProxyALBSecurityGroup"
        GroupDescription: "ALB Security Group"
        SecurityGroupIngress:
          - CidrIp: 10.0.0.0/8
            IpProtocol: tcp
            FromPort: 5050
            ToPort: 5050

    serviceALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Type: application
        Scheme: internal
        IpAddressType: ipv4
        Subnets: !Split [",", "${self:custom.vpc.subnets}"]
        SecurityGroups:
          - !Ref ALBSecurityGroupSendProxy

    albListenerSendProxy:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        Port: 5050
        LoadBalancerArn: !Ref ServiceALB
        Protocol: HTTP
        # Protocol: HTTPS
        # CertificateArn: "xxx" Eventually will be HTTPS once we have a ACM Cert Setup?
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref SendProxyTargetGroup

    sendProxyInvocationELBPermission:
      Type: AWS::Lambda::Permission
      DependsOn: SendProxyTargetGroup
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-sendProxy-${self:provider.stage}"
        Principal: elasticloadbalancing.amazonaws.com
        SourceArn: !Ref SendProxyTargetGroup

    sendProxyTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        TargetType: lambda
        Targets:
          - Id: "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-sendProxy-${self:provider.stage}"

  Outputs:
    serviceElbDnsName:
      Value:
        Fn::Join:
          - '-'
          - - Ref: "AWS::StackName"
          - - "serviceElbDnsName"
      Export:
        Name: !GetAtt ServiceALB.DNSName
