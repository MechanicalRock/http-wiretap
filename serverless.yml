service:
  name: wiretap-spike

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs8.10

custom:
  proxy:
    url: ${opt:proxyUrl}
    timeout: ${opt:proxyTimeout}
  vpc:
    id: ${opt:vpcId}
    subnets:
      private: ${opt:privateSubnetIds}
      public: ${opt:publicSubnetIds}
  wiretap:
    port: 5050

functions:
  sendProxy:
    handler: build/handler.sendProxy
    timeout: 30
    vpc:
      securityGroupIds:
        - Ref: sendProxySecurityGroup
      subnetIds: !Split [",", "${self:custom.vpc.subnets.private}"]
    environment:
      PROXY_URL: ${self:custom.proxy.url}
      PROXY_TIMEOUT_SECONDS: ${self:custom.proxy.timeout}

resources:
  Resources:
    sendProxySecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: SendProxySecurityGroup
        GroupDescription: "Lambda Security Group for sendProxy function"
        VpcId: ${self:custom.vpc.id}
        SecurityGroupIngress:
          - SourceSecurityGroupId: !Ref albSecurityGroupSendProxy
            IpProtocol: tcp
            FromPort: ${self:custom.wiretap.port}
            ToPort: ${self:custom.wiretap.port}

    albSecurityGroupSendProxy:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: ${self:custom.vpc.id}
        GroupName: "SendProxyALBSecurityGroup"
        GroupDescription: "ALB Security Group to define allowed traffic"
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            # CidrIp: 10.0.0.0/8
            IpProtocol: tcp
            FromPort: ${self:custom.wiretap.port}
            ToPort: ${self:custom.wiretap.port}

    albService:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Type: application
        # Scheme: internal
        Scheme: internet-facing
        IpAddressType: ipv4
        # Subnets: !Split [",", "${self:custom.vpc.subnets.private}"]
        Subnets: !Split [",", "${self:custom.vpc.subnets.public}"]
        SecurityGroups:
          - !Ref albSecurityGroupSendProxy

    albListenerSendProxy:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        Port: ${self:custom.wiretap.port}
        LoadBalancerArn: !Ref albService
        Protocol: HTTP
        # Protocol: HTTPS
        # Certificates:
        #   - CertificateArn: "xxx" Eventually will be HTTPS once we have a ACM Cert Setup?
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref sendProxyTargetGroup

    sendProxyInvocationELBPermission:
      Type: AWS::Lambda::Permission
      DependsOn: SendProxyLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt SendProxyLambdaFunction.Arn
        Principal: elasticloadbalancing.amazonaws.com
        SourceArn: arn:aws:elasticloadbalancing:#{AWS::Region}:#{AWS::AccountId}:targetgroup/*

    sendProxyTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        TargetType: lambda
        Targets:
          - Id: !GetAtt SendProxyLambdaFunction.Arn

  Outputs:
    serviceElbDnsName:
      Value: !GetAtt albService.DNSName
      Export:
        Name:
          Fn::Join:
            - '-'
            - - Ref: "AWS::StackName"
              - "serviceElbDnsName"

    sendProxyFunctionName:
      Value: !GetAtt SendProxyLambdaFunction.Arn
      Export:
        Name:
          Fn::Join:
            - '-'
            - - Ref: "AWS::StackName"
              - "sendProxyFunction"
